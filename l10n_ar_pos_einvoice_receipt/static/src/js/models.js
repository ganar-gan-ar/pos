odoo.define("l10n_ar_pos_einvoice_ticket.models", function (require) {
    var models = require("point_of_sale.models");
    var screens = require("point_of_sale.screens");
    var rpc = require("web.rpc");
    var core = require("web.core");
    var qweb = core.qweb;
  
    var _super_Order = models.Order.prototype;
    models.Order = models.Order.extend({
      initialize: function (attributes, options) {
        _super_Order.initialize.apply(this, arguments);
        if (this.pos.config.invoice_by_default) {
          this.to_invoice = true;
        }
      },
      init_from_JSON: function (json) {
        var res = _super_Order.init_from_JSON.apply(this, arguments);
        if (json.to_invoice) {
          this.to_invoice = json.to_invoice;
        }
      },
    });
  
    var _super_PosModel = models.PosModel.prototype;
    models.PosModel = models.PosModel.extend({
      initialize: function (session, attributes) {
        var partner_model = _.find(this.models, function (model) {
          return model.model === "res.partner";
        });
        partner_model.fields.push("vat");
        partner_model.fields.push("website");
        partner_model.fields.push("l10n_ar_afip_responsibility_type_id");
        _super_PosModel.initialize.apply(this, arguments);
      },

      push_and_invoice_order: function (order) {
        var self = this;
        var invoiced = new Promise(function (resolveInvoiced, rejectInvoiced) {
          if (!order.get_client()) {
            rejectInvoiced({ code: 400, message: "Missing Customer", data: {} });
          } else {
            var order_id = self.db.add_order(order.export_as_JSON());
            self.flush_mutex.exec(function () {
              var done = new Promise(function (resolveDone, rejectDone) {
                // send the order to the server
                // we have a 30 seconds timeout on this push.
                // FIXME: if the server takes more than 30 seconds to accept the order,
                // the client will believe it wasn't successfully sent, and very bad
                // things will happen as a duplicate will be sent next time
                // so we must make sure the server detects and ignores duplicated orders
  
                var transfer = self._flush_orders([self.db.get_order(order_id)], {
                  timeout: 30000,
                  to_invoice: true,
                });
  
                transfer.catch(function (error) {
                  rejectInvoiced(error);
                  rejectDone();
                });
  
                // on success, get the order id generated by the server
                transfer.then(function (order_server_id) {
                  // generate the pdf and download it
                  if (
                    order_server_id.length &&
                    !order.is_to_email() &&
                    order.pos.config.pdf_invoice_download
                  ) {
                    self.chrome
                      .do_action("point_of_sale.pos_invoice_report", {
                        additional_context: {
                          active_ids: order_server_id,
                        },
                      })
                      .then(function () {
                        resolveInvoiced(order_server_id);
                        resolveDone();
                      })
                      .guardedCatch(function (error) {
                        rejectInvoiced({
                          code: 401,
                          message: "Backend Invoice",
                          data: { order: order },
                        });
                        rejectDone();
                      });
                  } else if (order_server_id.length) {
                    resolveInvoiced(order_server_id);
                    resolveDone();
                  } else {
                    // The order has been pushed separately in batch when
                    // the connection came back.
                    // The user has to go to the backend to print the invoice
                    rejectInvoiced({
                      code: 401,
                      message: "Backend Invoice",
                      data: { order: order },
                    });
                    rejectDone();
                  }
                });
                return done;
              });
            });
          }
        });
  
        return invoiced;
      },
    });
  
    screens.ReceiptScreenWidget.include({
      print_xml: function () {
        var self = this;
        if (this.pos.config.show_invoice_number) {
          self.receipt_data = this.get_receipt_render_env();
          var order = this.pos.get_order();
          return rpc
            .query({
              model: "pos.order",
              method: "search_read",
              domain: [["pos_reference", "=", order["name"]]],
              fields: ["account_move"],
            })
            .then(function (orders) {
              if (orders.length > 0) {
                if (orders[0]["account_move"]) {
                  var invoice_number = orders[0]["account_move"][1].split(" ")[1];
                  var invoice_letter = orders[0]["account_move"][1]
                    .split(" ")[0]
                    .substring(3, 4);
                  var account_move = orders[0]["account_move"][0];
                  self.receipt_data["order"]["invoice_number"] = invoice_number;
                  self.receipt_data["order"]["invoice_letter"] = invoice_letter;
                  var company_id = self["pos"]["company"]["id"];
                  var partner_id = self["pos"]["company"]["partner_id"][0];
                  rpc
                    .query({
                      model: "res.company",
                      method: "search_read",
                      args: [
                        [["id", "=", company_id]],
                        ["l10n_ar_afip_start_date"],
                      ],
                    })
                    .then(function (company_dict) {
                      self.pos.get_order()["l10n_ar_afip_start_date"] =
                        company_dict[0]["l10n_ar_afip_start_date"];
  
                      rpc
                        .query({
                          model: "res.partner",
                          method: "search_read",
                          args: [
                            [["id", "=", partner_id]],
                            [
                              "vat",
                              "l10n_ar_gross_income_number",
                              "l10n_ar_afip_responsibility_type_id",
                              "street",
                              "city",
                              "state_id",
                              "company_registry",
                            ],
                          ],
                        })
                        .then(function (company_partner) {
                          self.receipt_data["order"]["vat"] =
                            company_partner[0]["vat"];
                          self.receipt_data["order"][
                            "l10n_ar_gross_income_number"
                          ] = company_partner[0]["l10n_ar_gross_income_number"];
                          self.receipt_data["order"]["l10n_ar_afip_start_date"] =
                            company_partner[0]["l10n_ar_afip_start_date"];
                          self.receipt_data["order"][
                            "l10n_ar_afip_responsibility_type_id"
                          ] =
                            company_partner[0][
                              "l10n_ar_afip_responsibility_type_id"
                            ][1];
                          self.receipt_data["order"]["street"] =
                            company_partner[0]["street"] +
                            ", " +
                            company_partner[0]["city"] +
                            ", " +
                            company_partner[0]["state_id"][1];
                          self.receipt_data["order"]["company_registry"] =
                            company_partner[0]["company_registry"];
  
                          rpc
                            .query({
                              model: "account.move",
                              method: "search_read",
                              args: [
                                [["id", "=", account_move]],
                                [
                                  "afip_auth_code",
                                  "afip_auth_code_due",
                                  "afip_qr_code",
                                  "l10n_latam_document_type_id",
                                ],
                              ],
                            })
                            .then(function (invoices) {
                              self.receipt_data["order"]["afip_qr_code"] =
                                invoices[0]["afip_qr_code"];
                              self.receipt_data["order"]["afip_auth_code"] =
                                invoices[0]["afip_auth_code"];
                              self.receipt_data["order"]["afip_auth_code_due"] =
                                invoices[0]["afip_auth_code_due"];
                              self.receipt_data["order"][
                                "l10n_latam_document_type_id"
                              ] = invoices[0][
                                "l10n_latam_document_type_id"
                              ][1].split(" ")[0];
                              var receipt = qweb.render(
                                "OrderReceipt",
                                self.receipt_data
                              );
                              self.pos.proxy.print_receipt(receipt);
                            });
                        });
                    });
                }
              }
            });
        } else {
          this._super();
        }
      },
  
      render_receipt: function () {
        this._super();
        var self = this;
        var order = this.pos.get_order();
  
        if (
          !this.pos.config.iface_print_via_proxy &&
          this.pos.config.show_invoice_number &&
          order.is_to_invoice()
        ) {
          var invoiced = new $.Deferred();
          rpc
            .query({
              model: "pos.order",
              method: "search_read",
              domain: [["pos_reference", "=", order["name"]]],
              fields: ["account_move"],
            })
            .then(function (orders) {
              if (
                orders.length > 0 &&
                orders[0]["account_move"] &&
                orders[0]["account_move"][1]
              ) {
                var invoice_number = orders[0]["account_move"][1].split(" ")[1];
                var invoice_letter = orders[0]["account_move"][1]
                  .split(" ")[0]
                  .substring(3, 4);
                var account_move = orders[0]["account_move"][0];
                self.pos.get_order()["invoice_number"] = invoice_number;
                self.pos.get_order()["invoice_letter"] = invoice_letter;
                var company_id = self["pos"]["company"]["id"];
                var partner_id = self["pos"]["company"]["partner_id"][0];
  
                rpc
                  .query({
                    model: "res.company",
                    method: "search_read",
                    args: [
                      [["id", "=", company_id]],
                      ["l10n_ar_afip_start_date", "company_registry"],
                    ],
                  })
                  .then(function (company_dict) {
                    self.pos.get_order()["l10n_ar_afip_start_date"] =
                      company_dict[0]["l10n_ar_afip_start_date"];
                    self.pos.get_order()["company_registry"] =
                      company_dict[0]["company_registry"];
                    rpc
                      .query({
                        model: "res.partner",
                        method: "search_read",
                        args: [
                          [["id", "=", partner_id]],
                          [
                            "vat",
                            "l10n_ar_gross_income_number",
                            "l10n_ar_afip_responsibility_type_id",
                            "street",
                            "city",
                            "state_id",
                          ],
                        ],
                      })
                      .then(function (company_partner) {
                        self.pos.get_order()["vat"] = company_partner[0]["vat"];
                        self.pos.get_order()["l10n_ar_gross_income_number"] =
                          company_partner[0]["l10n_ar_gross_income_number"];
                        self.pos.get_order()[
                          "l10n_ar_afip_responsibility_type_id"
                        ] =
                          company_partner[0][
                            "l10n_ar_afip_responsibility_type_id"
                          ][1];
                        self.pos.get_order()["street"] =
                          company_partner[0]["street"] +
                          ", " +
                          company_partner[0]["city"] +
                          ", " +
                          company_partner[0]["state_id"][1];
  
                        rpc
                          .query({
                            model: "account.move",
                            method: "search_read",
                            args: [
                              [["id", "=", account_move]],
                              [
                                "afip_auth_code",
                                "afip_auth_code_due",
                                "afip_qr_code",
                                "l10n_latam_document_type_id",
                                "invoice_date",
                              ],
                            ],
                          })
                          .then(function (invoices) {
                            console.log("invoices", invoices);
                            self.pos.get_order()["afip_qr_code"] =
                              invoices[0]["afip_qr_code"];
                            self.pos.get_order()["afip_auth_code"] =
                              invoices[0]["afip_auth_code"];
                            self.pos.get_order()["afip_auth_code_due"] =
                              invoices[0]["afip_auth_code_due"];
                            self.pos.get_order()[
                              "l10n_latam_document_type_id"
                            ] = invoices[0][
                              "l10n_latam_document_type_id"
                            ][1].split(" ")[0];
                            self.pos.get_order()["invoice_date"] =
                              invoices[0]["invoice_date"];
                            self
                              .$(".pos-receipt-container")
                              .html(
                                qweb.render(
                                  "OrderReceipt",
                                  self.get_receipt_render_env()
                                )
                              );
                          });
                      });
                  });
              }
              invoiced.resolve();
            })
            .catch(function (type, error) {
              invoiced.reject(error);
            });
          return invoiced;
        } else {
          this._super();
        }
      },
    });
  });
  